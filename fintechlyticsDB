-- 1. Users Table (stores information about users who interact with the financial platform)
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. Stocks Table (contains metadata about stocks available for trading and analysis)
CREATE TABLE stocks (
    stock_id SERIAL PRIMARY KEY,
    symbol VARCHAR(10) NOT NULL UNIQUE,
    company_name VARCHAR(100) NOT NULL,
    sector VARCHAR(50),
    listed_on DATE
);

-- 3. StockPrices Table (stores historical stock price data for analysis and reporting)
CREATE TABLE stock_prices (
    price_id SERIAL PRIMARY KEY,
    stock_id INTEGER NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    timestamp TIMESTAMP NOT NULL,
    CONSTRAINT fk_stockprices_stock
        FOREIGN KEY (stock_id) REFERENCES stocks(stock_id)
        ON DELETE CASCADE
);

-- 4. Transactions Table (records financial transactions made by users on the platform)
CREATE TABLE transactions (
    transaction_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    stock_id INTEGER NOT NULL,
    transaction_type VARCHAR(10) NOT NULL CHECK (transaction_type IN ('BUY', 'SELL')),
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    price DECIMAL(10, 2) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_transactions_user
        FOREIGN KEY (user_id) REFERENCES users(user_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_transactions_stock
        FOREIGN KEY (stock_id) REFERENCES stocks(stock_id)
        ON DELETE CASCADE
);

-- 5. Portfolios Table (stores information about user stock portfolios)
CREATE TABLE portfolios (
    portfolio_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    stock_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL CHECK (quantity >= 0),
    average_price DECIMAL(10, 2) NOT NULL,
    CONSTRAINT fk_portfolios_user
        FOREIGN KEY (user_id) REFERENCES users(user_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_portfolios_stock
        FOREIGN KEY (stock_id) REFERENCES stocks(stock_id)
        ON DELETE CASCADE,
    CONSTRAINT uc_user_stock UNIQUE (user_id, stock_id) -- prevent duplicate stock entries per user
);